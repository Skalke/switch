{
  "title": "Checkpoint",
  "author": "FlagBrew",
  "category": "tool",
  "version": "3.6.0",
  "url": "https://github.com/FlagBrew/Checkpoint/releases",
  "license": "GPLv3",
  "description": "Save Manager",
  "details": "Why use Checkpoint?\\n\\nCheckpoint is created following ideas of simplicity and efficiency. The UI has been designed to condense as many options as possible, while keeping it simple to work with.\\n\\nMoreover, Checkpoint is extremely lightweight - while being packaged with a nice graphic user interface - and is built using the most recent libraries available.\\n\\nCheckpoint for Switch natively supports NAND saves for the titles you have played. Title information are loaded automatically.\\n\\nWorking path\\n\\nCheckpoint relies on the following folders to store the files it generates. Note that all the working directories are automatically generated on first launch (or when Checkpoint finds a new title that doesn't have a working directory yet).\\n\\n - sdmc:/switch/Checkpoint: root path\\n - sdmc:/switch/Checkpoint/config.json: custom configuration file\\n - sdmc:/switch/Checkpoint/saves/<title id> <game title>: root path for all the save backups for a generic game\\n\\nUsage\\n\\nCheckpoint for Switch only runs on homebrew launcher. Make sure you're running up-to-date payloads.\\n\\nThe first launch will take considerably longer than usual (usually 1-2 minutes depending on how many titles you have installed), due to the working directories being created - Checkpoint will be significatively faster upon launch from then on.\\n\\nYou can scroll between the title list with the DPAD/LR and target a title with A when the selector is on it. Now, you can use the DPAD or the touchscreen to select a target backup to restore/overwrite.",
  "changelog": "v3.6\\n\\nAdded: a bridge functionality between Checkpoint for Switch and PKSM (for 3DS, v6.0.0 and above) has been implemented.\\nIt allows to send (and then receive back) a save file over the network, to allow manipulations without having to browse your save backups manually on your PC.\\nIt also needs to be manually enabled by editing your configuration file. Once it's enabled, you can access the bridge by pressing L+R on a valid game.\\nThis feature currently works only with LGPE.\\nFixed: buttons are now responsive as before while navigating the UI.\\nFixed: titles with black background are now displayed properly.\\nFixed: checkmark color doesn't confuse with title icons anymore.\\nFixed: text doesn't bleed textboxes like before anymore.\\n\\nv3.5\\n\\nAdded support for Hardware Acceleration. Checkpoint now relies on the GPU to render graphics and text, removing load from the CPU.\\nThe interface now relies on SDL2 to render images and text.\\nText rendering is optimized by using a customized version of SDL_FontCache which caches glyphs in memory rather than creating textures every frame. This also allows to use the system font already available in the console.\\nCheckpoint caches from PlSharedFontType_Standard and PlSharedFontType_NintendoExt fonts, so both regular characters and symbols are now supported to be rendered on screen.\\nAdded option to set a title as Favorite. You can now edit your configuration file to set a title id to be a favorite title, so this will always appear at the top of the title list.\\nFixed crashes caused by too many file descriptors opened.\\nKey behaviour changed. ( thanks @IBNobody )\\nYou can now select rows in the backup list, creating backups and restoring a backup just with the button A.\\nPressing Y will select the current title but deactivate/reset the backup list. It will also enable the backup touch button only. Creating a backup will then disable the backup touch button. This makes it more clear to the user what buttons / UI elements are relevant to multi-backup.\\nFixed occasional crashes while changing account.\\nCheckpoint now uses latest libnx 1.5.0, which supports timezone and fixes wrong default backup names if your console never connected to internet.\\nCheckpoint is now compiled using C++17."
}